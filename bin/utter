#!/usr/bin/env ruby
require 'find'
require 'fileutils'
require 'optparse'
require 'rack'
require 'utter'

module Utter
  module Utils
    # Credits for the plural module goes to stewart https://github.com/stewart/plural
    # Brought here to keep gem dependency overload to the absolute minimum. 
    module Plural
      def self.rules
	@rules ||= [
	  [/(z)ombies$/i, "\\1ombies"],
	  [/(z)ombie$/i, "\\1ombies"],
	  [/k(?i)ine$/, "kine"],
	  [/K(?i)ine$/, "Kine"],
	  [/c(?i)ow$/, "kine"],
	  [/C(?i)ow$/, "Kine"],
	  [/(m)oves$/i, "\\1oves"],
	  [/(m)ove$/i, "\\1oves"],
	  [/(s)exes$/i, "\\1exes"],
	  [/(s)ex$/i, "\\1exes"],
	  [/(c)hildren$/i, "\\1hildren"],
	  [/(c)hild$/i, "\\1hildren"],
	  [/(m)en$/i, "\\1en"],
	  [/(m)an$/i, "\\1en"],
	  [/(p)eople$/i, "\\1eople"],
	  [/(p)erson$/i, "\\1eople"],
	  [/(quiz)$/i, "\\1zes"],
	  [/^(oxen)$/i, "\\1"],
	  [/^(ox)$/i, "\\1en"],
	  [/^(m|l)ice$/i, "\\1ice"],
	  [/^(m|l)ouse$/i, "\\1ice"],
	  [/(matr|vert|ind)(?:ix|ex)$/i, "\\1ices"],
	  [/(x|ch|ss|sh)$/i, "\\1es"],
	  [/([^aeiouy]|qu)y$/i, "\\1ies"],
	  [/(hive)$/i, "\\1s"],
	  [/(?:([^f])fe|([lr])f)$/i, "\\1\\2ves"],
	  [/sis$/i, "ses"],
	  [/([ti])a$/i, "\\1a"],
	  [/([ti])um$/i, "\\1a"],
	  [/(buffal|tomat)o$/i, "\\1oes"],
	  [/(bu)s$/i, "\\1ses"],
	  [/(alias|status)$/i, "\\1es"],
	  [/(octop|vir)i$/i, "\\1i"],
	  [/(octop|vir)us$/i, "\\1i"],
	  [/^(ax|test)is$/i, "\\1es"],
	  [/s$/i, "s"],
	  [/$/, "s"]
	]
      end

      def self.uncountables
	@uncountables ||= %w(equipment information rice money
			 species series fish sheep jeans police)
      end

    end
    class Str < String
      def initialize result 
	@result = result
      end
      def plural
	@result = self.dup

	if self.empty? || Plural.uncountables.any? { |i| @result =~ /\b#{i}\Z/i }
	  @result
	else
	  Plural.rules.each { |(rule, replacement)| break if @result.gsub!(rule, replacement) }
	  @result
	end
      end
    end
  end
end


subtext = <<HELP

 88        88                                           
 88        88    ,d       ,d                            
 88        88    88       88                            
 88        88  MM88MMM  MM88MMM  ,adPPYba,  8b,dPPYba,  
 88        88    88       88    a8P_____88  88P'   "Y8  
 88        88    88       88    8PP"""""""  88          
 Y8a.    .a8P    88,      88,   "8b,   ,aa  88          
  `"Y8888Y"'     "Y888    "Y888  `"Ybbd8"'  88          


  usage: utter [command] [options]

  -----------------------------------------------------------------------------------------------------------------------
    new          	:    creates a project folder 
    > utter new my_project
  -----------------------------------------------------------------------------------------------------------------------
    new model    	:    creates a project model 
    > utter new model User 
  -----------------------------------------------------------------------------------------------------------------------
    new endpoint 	:    creates a project endpoint 
    > utter new endpoint UserAPI
  -----------------------------------------------------------------------------------------------------------------------
    package      	:    packages the project as a gem 
  -----------------------------------------------------------------------------------------------------------------------
    set          	:    set your own gem server URL 
  -----------------------------------------------------------------------------------------------------------------------
    publish      	:    publish the project gem to your own gem server 
  -----------------------------------------------------------------------------------------------------------------------
    start        	:    launches the utter server 
  -----------------------------------------------------------------------------------------------------------------------
    status       	:    status of the utter server 
  -----------------------------------------------------------------------------------------------------------------------
    stop         	:    status of the utter server 
  -----------------------------------------------------------------------------------------------------------------------
    {model} simple_auth :    creates a {model} api with simple signup and login 
  -----------------------------------------------------------------------------------------------------------------------
    db           :    
  -----------------------------------------------------------------------------------------------------------------------
    server       :    launches the utter server 
  -----------------------------------------------------------------------------------------------------------------------

HELP

global = OptionParser.new do |opts|
  opts.banner = ""
  opts.separator ""
  opts.separator subtext
end
global.order!
command = ARGV.shift

case command 

when "new"
  #TODO make a Rakefile in the project folder to setup all the needed functionality and then use it from the bin script
  @model = Utter::Utils::Str.new ARGV[0] 
  @ver     = ARGV[1] 
  p "generating a new utter project" 
  p "#{@model.plural}::#{@ver}" 
      
when "generate", "g"
  @model = ARGV[0] 
  @auth = ARGV[1]
  if "auth" == ARGV[1]
    p "generating authentication for #{@model}" 
  end
when "server", "s"
  #TODO add gem server to gemspec
  # http://blog.gemnasium.com/post/62702069261/serving-ruby-gems-the-paranoid-way
  require './gem_server'

when "publish"
  @gem = ARGV[0] 

  Find.find(Dir.pwd) do |path|
    if (File.extname(path) == ".gemspec") && (File.basename(path).include? @gem.downcase) 
      @path = path
      `gem build #{@path.downcase}`
    end
    if (File.extname(path) == ".gem") && (File.basename(path).include? @gem.downcase) 
      @path = path
      `gem push #{@path.downcase}`
    end
  end
when "clean"

when "start"
  @port = ARGV[0] 
  if ARGV[0].nil?
    @port = 9393
  end
  #Rack::Handler::Thin.run Utter::Endpoints, :Port => @port 
  status = `pgrep rack`
  if status.empty?
    $pid = fork do
      `rackup config.ru -p #{@port} &`
    end
    puts "utter is UP! pid: #{$pid}, port: #{@port}"
  else 
    puts "utter is already UP"
  end
when "status"
  status = `pgrep rack`
  if status.empty?
    puts "utter is down"
  else
    puts "utter is up"
  end

when "stop"
  status = `pgrep rack`
  if status.empty?
    puts "utter is already down"
  else
    `pkill rack`
    puts "utter is down"
  end
when "basic_auth"
  @model = ARGV[0] 
  #TODO creates User API for the model (default: user) and setup database
  #
  # use Rack::Auth::Basic, "Protected Area" do |username, password|
  #   username == 'foo' && password == 'bar'
  # end
  #
  #require 'rack/ssl'

  #    use Rack::SSL
  #    $Utter.use Rack::Auth::Basic, "Restricted Area" do |username, password|
  #      username == 'admin' and password == 'admin'
  #    end
  #
when "db"
  @db - ARGV[0]
  #Marshling user objects via redis 
when "console"
  require 'irb'
  require 'irb/completion'
  #TODO require local project files as well.
  IRB.start

else
  puts "Sorry command not found; try --help for more information"
end




# create a stub new #{} API application

#> utter new MyCompany User name, address, website
# this creates user_api.rb file in the folder <api> with the namespace MyCompany and the class UserAPI
# this creates user.rb file in the folder <models> with the namespace MyCompany and the class User with mongoid loaded and ready

# utter new project #{project_name as namespace} 
# utter new api #{api_class} # creates its own inside project name namespace, gem.spec, rake, specs,
# utter new model #{model} # creates its own inside project name namespace, rake, specs
# utter server #{sets a line inside config.ru of the gem server of the company}, rake, specs
# utter publish #{publish the project as a gem to the server}
